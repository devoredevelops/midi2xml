{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fnil\fcharset0 HelveticaNeue-Italic;
\f3\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red255\green255\blue255;\red0\green0\blue0;\red39\green142\blue204;
}
{\*\expandedcolortbl;;\cssrgb\c100000\c100000\c100000;\cssrgb\c0\c0\c0\c3922;\cssrgb\c18039\c62745\c83922;
}
\margl1440\margr1440\vieww35340\viewh19920\viewkind0
\deftab720
\pard\pardeftab720\sa423\partightenfactor0

\f0\b\fs39\fsmilli19635 \cf0 \expnd0\expndtw0\kerning0
Introduction\
\pard\pardeftab720\sa340\partightenfactor0

\f1\b0\fs26\fsmilli13090 \cf0 Stop trying to reinvent the wheel.\
When you encounter a new algorithm problem, it's better to apply an existing algorithm template than to design and implement one from scratch. In this series, I have collected and summarized the general code templates for particular algorithms and added typical examples to help you make better use of them.\
\pard\pardeftab720\sa423\partightenfactor0

\f0\b\fs39\fsmilli19635 \cf0 Why Python?\
\pard\pardeftab720\sa340\partightenfactor0

\f1\b0\fs26\fsmilli13090 \cf0 As the saying goes, "Life is short. You need Python." With the help of concise syntax and advanced features, Python lets us ignore redundant grammar and totally focus on algorithm and logic. As a high-level language, Python is well suited for expressing algorithms. It's close to natural languages. Besides, Python is one of the most popular languages nowadays.\
It's worth mentioning that the algorithm templates in this guide are written in Python, but it is easy to extend them to other languages, such as Java or C++. Just replace Python's syntactic sugar and advanced tricks, though this may result in less concise syntax.\
\pard\pardeftab720\sa423\partightenfactor0

\f0\b\fs39\fsmilli19635 \cf0 Templates\
\pard\pardeftab720\sa340\partightenfactor0

\f1\b0\fs26\fsmilli13090 \cf0 As I mentioned before, algorithm templates are very useful. They show the core idea of an algorithm, and by reusing and reforming these templates, you can easily apply them to your scenario. To use a more vivid example, it's hard to build a house from nothing, but easier if we have the framework and components. We just need to choose, fill, reform, and decorate.\
I have tried my best to collect and summarize the most general and best-practice templates in a particular domain, but this version may not be the best solution. Or, it is indeed the best performing and most concise solution, but it's not suitable for you. Within acceptable performance measures, a coding style is best for you when it's most convenient.\
These code templates are written in Python with some 
\f2\i pseudo code
\f1\i0 , so I use 
\f3\fs21\fsmilli10780 \cb3 self
\f1\fs26\fsmilli13090 \cb1  and add stub functions to pass compiler's check. You should replace them with your particular logic according to the comments. In order to keep the code concise, some code snippets may not be complete and runnable.\
\pard\pardeftab720\sa423\partightenfactor0

\f0\b\fs39\fsmilli19635 \cf0 Examples\
\pard\pardeftab720\sa340\partightenfactor0

\f1\b0\fs26\fsmilli13090 \cf0 Many code examples in these guides come from {\field{\*\fldinst{HYPERLINK "https://leetcode.com/problemset/all/"}}{\fldrslt \cf4 LeetCode}}. I have tried my best to include brief problem descriptions for most cases, but in reality, you can focus only on the algorithm. If you are also interested in the problem and want to go deeper, you can visit {\field{\*\fldinst{HYPERLINK "https://leetcode.com/problemset/all/"}}{\fldrslt \cf4 LeetCode}} for more information (I have included the problem ID for your information).\
Thanks to LeetCode for the algorithm problems. Moreover, LeetCode has a great OJ platform. It's great for functional and performance tests. Many templates and tricks are brought to light by discussions in LeetCode. Thanks to all the code masters who have worked on this platform.\
\pard\pardeftab720\sa423\partightenfactor0

\f0\b\fs39\fsmilli19635 \cf0 Conclusion\uc0\u937 \u937 \
\pard\pardeftab720\sa340\partightenfactor0

\f1\b0\fs26\fsmilli13090 \cf0 Now we're ready to start our algorithm template learning journey. You can start with {\field{\*\fldinst{HYPERLINK "file:///guides/algorithm-templates:-two-pointers-part-1"}}{\fldrslt \cf4 Algorithm Templates: Two Pointers - Part 1}}.\
To access the complete code, you can download {\field{\*\fldinst{HYPERLINK "https://github.com/recnac-itna/Algorithm_Templates"}}{\fldrslt \cf4 Algorithm Templates}} from Github. I hope some of them will be useful for you.\
\pard\pardeftab720\partightenfactor0
\cf0 Hope you enjoy this series. If you have any questions, you're welcome to contact me at recnac@foxmail.com.\
\
\
\
\pard\pardeftab720\sa423\partightenfactor0

\f0\b\fs39\fsmilli19635 \cf0 Introduction\
\pard\pardeftab720\sa340\partightenfactor0

\f1\b0\fs26\fsmilli13090 \cf0 Stop trying to reinvent the wheel.\
When you encounter a new algorithm problem, it's better to apply an existing algorithm template than to design and implement one from scratch. In this series, I have collected and summarized the general code templates for particular algorithms and added typical examples to help you make better use of them.\
\pard\pardeftab720\sa423\partightenfactor0

\f0\b\fs39\fsmilli19635 \cf0 Why Python?\
\pard\pardeftab720\sa340\partightenfactor0

\f1\b0\fs26\fsmilli13090 \cf0 As the saying goes, "Life is short. You need Python." With the help of concise syntax and advanced features, Python lets us ignore redundant grammar and totally focus on algorithm and logic. As a high-level language, Python is well suited for expressing algorithms. It's close to natural languages. Besides, Python is one of the most popular languages nowadays.\
It's worth mentioning that the algorithm templates in this guide are written in Python, but it is easy to extend them to other languages, such as Java or C++. Just replace Python's syntactic sugar and advanced tricks, though this may result in less concise syntax.\
\pard\pardeftab720\sa423\partightenfactor0

\f0\b\fs39\fsmilli19635 \cf0 Templates\
\pard\pardeftab720\sa340\partightenfactor0

\f1\b0\fs26\fsmilli13090 \cf0 As I mentioned before, algorithm templates are very useful. They show the core idea of an algorithm, and by reusing and reforming these templates, you can easily apply them to your scenario. To use a more vivid example, it's hard to build a house from nothing, but easier if we have the framework and components. We just need to choose, fill, reform, and decorate.\
I have tried my best to collect and summarize the most general and best-practice templates in a particular domain, but this version may not be the best solution. Or, it is indeed the best performing and most concise solution, but it's not suitable for you. Within acceptable performance measures, a coding style is best for you when it's most convenient.\
These code templates are written in Python with some 
\f2\i pseudo code
\f1\i0 , so I use 
\f3\fs21\fsmilli10780 \cb3 self
\f1\fs26\fsmilli13090 \cb1  and add stub functions to pass compiler's check. You should replace them with your particular logic according to the comments. In order to keep the code concise, some code snippets may not be complete and runnable.\
\pard\pardeftab720\sa423\partightenfactor0

\f0\b\fs39\fsmilli19635 \cf0 Examples\
\pard\pardeftab720\sa340\partightenfactor0

\f1\b0\fs26\fsmilli13090 \cf0 Many code examples in these guides come from {\field{\*\fldinst{HYPERLINK "https://leetcode.com/problemset/all/"}}{\fldrslt \cf4 LeetCode}}. I have tried my best to include brief problem descriptions for most cases, but in reality, you can focus only on the algorithm. If you are also interested in the problem and want to go deeper, you can visit {\field{\*\fldinst{HYPERLINK "https://leetcode.com/problemset/all/"}}{\fldrslt \cf4 LeetCode}} for more information (I have included the problem ID for your information).\
Thanks to LeetCode for the algorithm problems. Moreover, LeetCode has a great OJ platform. It's great for functional and performance tests. Many templates and tricks are brought to light by discussions in LeetCode. Thanks to all the code masters who have worked on this platform.\
\pard\pardeftab720\sa423\partightenfactor0

\f0\b\fs39\fsmilli19635 \cf0 Conclusion\
\pard\pardeftab720\sa340\partightenfactor0

\f1\b0\fs26\fsmilli13090 \cf0 Now we're ready to start our algorithm template learning journey. You can start with {\field{\*\fldinst{HYPERLINK "file:///guides/algorithm-templates:-two-pointers-part-1"}}{\fldrslt \cf4 Algorithm Templates: Two Pointers - Part 1}}.\
To access the complete code, you can download {\field{\*\fldinst{HYPERLINK "https://github.com/recnac-itna/Algorithm_Templates"}}{\fldrslt \cf4 Algorithm Templates}} from Github. I hope some of them will be useful for you.\
\pard\pardeftab720\partightenfactor0
\cf0 Hope you enjoy this series. If you have any questions, you're welcome to contact me at recnac@foxmail.com.}